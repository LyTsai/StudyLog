{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset134 PingFangSC-Regular;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red63\green110\blue116;\red92\green38\blue153;
\red28\green0\blue207;\red38\green71\blue75;\red46\green13\blue110;\red0\green116\blue0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab692
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \CocoaLigature0 \'bf\'a8\'c6\'ac\'b6\'af\'bb\'ad\'b7\'c9\'c8\'eb
\f1 \
\
    \cf2 func\cf0  loadNewCards(\cf2 _\cf0  vCards: [\cf3 VCardModel\cf0 ], animated: \cf4 Bool\cf0 ) \{\
        \cf2 if\cf0  \cf4 subviews\cf0 .\cf4 count\cf0  != \cf5 0\cf0  \{\
            \cf6 flyArrayToUpRightAndReset\cf0 (\cf3 totalCards\cf0 [\cf3 currentCardIndex\cf0 ])\
        \}\
        \
        \cf2 var\cf0  vCardViews = [\cf3 CardTemplateView\cf0 ]()\
        \cf2 for\cf0  vCard \cf2 in\cf0  vCards \{\
            \cf2 let\cf0  card = \cf3 CardTemplateManager\cf0 .\cf3 sharedManager\cf0 .\cf6 createCardTemplateWithKey\cf0 (vCard.\cf3 style\cf0 !.\cf3 key\cf0 !, frame: \cf4 CGRect\cf0 .\cf4 zero\cf0 )\
            vCardViews.\cf7 append\cf0 (card)\
        \}\
        \
        \cf6 changePropertyIfNeeded\cf0 ()\
        \cf2 if\cf0  animated \cf7 ==\cf0  \cf2 false\cf0  \{\
            \cf6 reloadViewsWithCards\cf0 (vCardViews, currentCardIndex: \cf5 0\cf0 )\
            \cf2 return\cf0 \
        \}\
        \
        \cf8 // load new cards by using animation\
\cf0         \cf2 for\cf0  view \cf2 in\cf0  \cf4 subviews\cf0  \{\
            view.\cf7 removeFromSuperview\cf0 ()\
        \}\
        \
        \cf3 totalCards\cf0  = vCardViews\
        \cf3 currentCardIndex\cf0  = \cf5 0\cf0 \
        \cf4 gestureRecognizers\cf0  = \cf2 nil\cf0 \
        \
        \cf8 // add new views\
\cf0         \cf6 resetVisibleFrames\cf0 ()\
        \cf3 currentCardIndex\cf0  = \cf3 numberOfCards\cf0  - \cf5 1\cf0 \
        \
        \cf4 Timer\cf0 .\cf7 scheduledTimer\cf0 (timeInterval: \cf5 0.3\cf0 , target: \cf2 self\cf0 , selector: \cf2 #selector\cf0 (\cf6 addOneCard\cf0 (\cf2 _\cf0 :)), userInfo: \cf2 nil\cf0 , repeats: \cf2 true\cf0 )\
    \}\
    \
    \cf2 func\cf0  addOneCard(\cf2 _\cf0  timer: \cf4 Timer\cf0 ) \{\
        \cf2 let\cf0  temp = \cf3 totalCards\cf0 [\cf3 currentCardIndex\cf0 ]\
        \cf2 let\cf0  finalOrigin = temp.\cf4 frame\cf0 .\cf4 origin\cf0 \
        \cf2 let\cf0  initialOrigin = \cf4 CGPoint\cf0 (x: \cf5 -100\cf0 , y: \cf5 -200\cf0 )\
        temp.\cf4 frame\cf0 .\cf4 origin\cf0  = initialOrigin\
        \cf7 addSubview\cf0 (temp)\
        \
        \cf4 UIView\cf0 .\cf7 animate\cf0 (withDuration: \cf5 0.5\cf0 , animations: \{\
            temp.\cf4 frame\cf0 .\cf4 origin\cf0  = finalOrigin\
            \}, completion: \{ (\cf2 true\cf0 ) \cf2 in\cf0  \})\
        \cf3 currentCardIndex\cf0  -= \cf5 1\cf0 \
        \cf2 if\cf0  \cf3 currentCardIndex\cf0  < \cf5 0\cf0  \{\
            timer.\cf7 invalidate\cf0 ()\
        \}\
    \}}