{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { getCurrentInstance, reactive, ref, unref } from 'vue';\nexport default {\n  setup(props) {\n    const loginFormRef = ref();\n    const loginForm = reactive({\n      username: '',\n      password: ''\n    });\n    const loginFormRules = reactive({\n      username: [{\n        required: true,\n        message: 'Please input a valid account',\n        trigger: 'blur'\n      }],\n      password: [{\n        required: true,\n        message: 'Please input password',\n        trigger: 'blur'\n      }]\n    });\n\n    const resetLoginForm = () => {\n      const formEl = unref(loginFormRef);\n      formEl.resetFields();\n    };\n\n    const {\n      proxy\n    } = getCurrentInstance();\n\n    const login = async () => {\n      const formEl = unref(loginFormRef);\n      if (!formEl) return;\n      await formEl.validate((valid, fields) => {\n        if (valid) {\n          const loginUrl = 'https://annielyticx-gamedataauth.azurewebsites.net/oauth/token';\n          const body = 'username=' + loginForm.username + '&password=' + loginForm.password + '&grant_type=password';\n          fetch(loginUrl, {\n            method: 'post',\n            body: body,\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded'\n            }\n          }).then(response => {\n            console.log(response);\n\n            if (!response.ok) {\n              throw new Error('Failed to login' + response.status);\n            }\n\n            return response.json();\n          }).then(result => {\n            console.log(result);\n            const token = result.access_token;\n            window.sessionStorage.setItem('token', token);\n            proxy.$router.push('/home');\n          }).catch(error => {\n            alert('Failed to login :' + error);\n          });\n        } else {\n          console.log('error submit!', fields);\n        }\n      });\n    };\n\n    return {\n      loginFormRef,\n      loginForm,\n      loginFormRules,\n      resetLoginForm,\n      login\n    };\n  }\n\n};","map":{"version":3,"mappings":";AA2BA,SAASA,kBAAT,EAA6BC,QAA7B,EAAuCC,GAAvC,EAA4CC,KAA5C,QAAyD,KAAzD;AACA,eAAe;AACbC,OAAI,CAAGC,KAAH,EAAU;AACZ,UAAMC,YAAW,GAAIJ,GAAG,EAAxB;AACA,UAAMK,SAAQ,GAAIN,QAAQ,CAAC;AACzBO,cAAQ,EAAE,EADe;AAEzBC,cAAQ,EAAE;AAFe,KAAD,CAA1B;AAIA,UAAMC,cAAa,GAAIT,QAAQ,CAAC;AAC9BO,cAAQ,EAAE,CACR;AAAEG,gBAAQ,EAAE,IAAZ;AAAkBC,eAAO,EAAE,8BAA3B;AAA2DC,eAAO,EAAE;AAApE,OADQ,CADoB;AAI9BJ,cAAQ,EAAE,CACR;AAAEE,gBAAQ,EAAE,IAAZ;AAAkBC,eAAO,EAAE,uBAA3B;AAAoDC,eAAO,EAAE;AAA7D,OADQ;AAJoB,KAAD,CAA/B;;AASA,UAAMC,cAAa,GAAI,MAAM;AAC3B,YAAMC,MAAK,GAAIZ,KAAK,CAACG,YAAD,CAApB;AACAS,YAAM,CAACC,WAAP;AACF,KAHA;;AAKF,UAAM;AAAEC;AAAF,QAAYjB,kBAAkB,EAApC;;AACE,UAAMkB,KAAI,GAAI,YAAY;AACxB,YAAMH,MAAK,GAAIZ,KAAK,CAACG,YAAD,CAApB;AACA,UAAI,CAACS,MAAL,EAAa;AACb,YAAMA,MAAM,CAACI,QAAP,CAAgB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvC,YAAID,KAAJ,EAAW;AACT,gBAAME,QAAO,GAAI,gEAAjB;AACA,gBAAMC,IAAG,GAAI,cAAchB,SAAS,CAACC,QAAxB,GAAmC,YAAnC,GAAkDD,SAAS,CAACE,QAA5D,GAAuE,sBAApF;AACAe,eAAK,CAACF,QAAD,EAAW;AACdG,kBAAM,EAAE,MADM;AAEdF,gBAAI,EAAEA,IAFQ;AAGdG,mBAAO,EAAE;AACP,8BAAgB;AADT;AAHK,WAAX,CAAL,CAMGC,IANH,CAMQC,QAAO,IAAK;AAClBC,mBAAO,CAACC,GAAR,CAAYF,QAAZ;;AACA,gBAAI,CAACA,QAAQ,CAACG,EAAd,EAAkB;AAChB,oBAAM,IAAIC,KAAJ,CAAU,oBAAoBJ,QAAQ,CAACK,MAAvC,CAAN;AACF;;AACA,mBAAOL,QAAQ,CAACM,IAAT,EAAP;AACD,WAZD,EAYGP,IAZH,CAYQQ,MAAK,IAAK;AAChBN,mBAAO,CAACC,GAAR,CAAYK,MAAZ;AACA,kBAAMC,KAAI,GAAID,MAAM,CAACE,YAArB;AACAC,kBAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,OAA9B,EAAuCJ,KAAvC;AACAnB,iBAAK,CAACwB,OAAN,CAAcC,IAAd,CAAmB,OAAnB;AACD,WAjBD,EAiBGC,KAjBH,CAiBSC,KAAI,IAAK;AAChBC,iBAAK,CAAC,sBAAsBD,KAAvB,CAAL;AACD,WAnBD;AAoBF,SAvBA,MAuBO;AACLf,iBAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BT,MAA7B;AACF;AACD,OA3BK,CAAN;AA4BF,KA/BA;;AAgCA,WAAO;AACLf,kBADK;AACSC,eADT;AACoBG,oBADpB;AACoCI,oBADpC;AACoDI;AADpD,KAAP;AAGF;;AAzDa,CAAf","names":["getCurrentInstance","reactive","ref","unref","setup","props","loginFormRef","loginForm","username","password","loginFormRules","required","message","trigger","resetLoginForm","formEl","resetFields","proxy","login","validate","valid","fields","loginUrl","body","fetch","method","headers","then","response","console","log","ok","Error","status","json","result","token","access_token","window","sessionStorage","setItem","$router","push","catch","error","alert"],"sourceRoot":"","sources":["/Volumes/iMacDisk/Users/Shared/GitHub/StudyLog/sharemap_manage/src/views/LoginView.vue"],"sourcesContent":["<template>\n<div class=\"login_container\">\n  <div class=\"login_box\">\n    <!-- logo image -->\n    <div class=\"avator_box\">\n      <img src=\"../assets/logo.png\" alt=\"logo\">\n    </div>\n    <el-form ref=\"loginFormRef\" :model=\"loginForm\" :rules=\"loginFormRules\" label-width=\"120\" class=\"login_form\" hide-required-asterisk=false>\n      <!-- username -->\n      <el-form-item label = \"Username:\" prop=\"username\">\n        <el-input v-model=\"loginForm.username\" placeholder=\"Please input Email address\" :prefix-icon=\"Search\"/>\n      </el-form-item>\n        <!-- password -->\n      <el-form-item label = \"Password:\" prop=\"password\">\n        <el-input v-model=\"loginForm.password\" type=\"password\" placeholder=\"Please input password\" show-password :prefix-icon=\"icon-password\"/>\n      </el-form-item>\n        <!-- buttons -->\n      <el-form-item class=\"btns\">\n        <el-button type=\"primary\" @click=\"login\">Log In</el-button>\n        <el-button type=\"info\" @click=\"resetLoginForm\">Reset</el-button>\n      </el-form-item>\n    </el-form>\n  </div>\n</div>\n</template>\n\n<script>\nimport { getCurrentInstance, reactive, ref, unref } from 'vue'\nexport default {\n  setup (props) {\n    const loginFormRef = ref()\n    const loginForm = reactive({\n      username: '',\n      password: ''\n    })\n    const loginFormRules = reactive({\n      username: [\n        { required: true, message: 'Please input a valid account', trigger: 'blur' }\n      ],\n      password: [\n        { required: true, message: 'Please input password', trigger: 'blur' }\n      ]\n    })\n\n    const resetLoginForm = () => {\n      const formEl = unref(loginFormRef)\n      formEl.resetFields()\n    }\n\n  const { proxy } = getCurrentInstance()\n    const login = async () => {\n      const formEl = unref(loginFormRef)\n      if (!formEl) return\n      await formEl.validate((valid, fields) => {\n        if (valid) {\n          const loginUrl = 'https://annielyticx-gamedataauth.azurewebsites.net/oauth/token'\n          const body = 'username=' + loginForm.username + '&password=' + loginForm.password + '&grant_type=password'\n          fetch(loginUrl, {\n            method: 'post',\n            body: body,\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded'\n            }\n          }).then(response => {\n            console.log(response)\n            if (!response.ok) {\n              throw new Error('Failed to login' + response.status)\n            }\n            return response.json()\n          }).then(result => {\n            console.log(result)\n            const token = result.access_token\n            window.sessionStorage.setItem('token', token)\n            proxy.$router.push('/home')\n          }).catch(error => {\n            alert('Failed to login :' + error)\n          })\n        } else {\n          console.log('error submit!', fields)\n        }\n      })\n    }\n    return {\n      loginFormRef, loginForm, loginFormRules, resetLoginForm, login\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n.login_container {\n    background-color: #2b4b6b;\n    height: 100%;\n}\n\n.login_box {\n    width: 450px;\n    height: 300px;\n    background-color: white;\n    border-radius: 3px;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n}\n\n.avator_box {\n    height: 130px;\n    width: 130px;\n    border: 1px solid #eee;\n    border-radius: 50%;\n    padding: 10px;\n    box-shadow: 0 0 10px #ddd;\n    position: absolute;\n    left: 50%;\n    top: -50%;\n    transform: translate(-50%, 50%);\n    background-color: #fff;\n    img {\n        width: 100%;\n        height: 100%;\n        border-radius: 50%;\n        background-color: #eee;\n    }\n}\n\n.login_form {\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n    padding: 0 20px;\n    box-sizing: border-box;\n}\n\n.btns {\n    display: flex;\n    justify-content: flex-end;\n    float: right;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}